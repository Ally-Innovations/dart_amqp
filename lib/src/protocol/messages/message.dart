// The file contains the base class for AMQP method messages
// and a factory constructor for unserializing AMQP messages
// from incoming frames
//
// File was auto-generated by generate_bindings.dart at 2015-04-16 08:14:03.935
//
// Do not modify

part of dart_amqp.protocol;

abstract class Message {

  int get msgClassId;

  int get msgMethodId;

  bool get msgHasContent;

  void serialize(TypeEncoder encoder);

  factory Message.fromStream(TypeDecoder decoder){
    int msgClassId = decoder.readUInt16();
    int msgMethodId = decoder.readUInt16();

    switch( msgClassId ){
      case 10:  // Class: Connection
        switch( msgMethodId ){
          case 10:
            return new ConnectionStart.fromStream( decoder );
          case 20:
            return new ConnectionSecure.fromStream( decoder );
          case 30:
            return new ConnectionTune.fromStream( decoder );
          case 41:
            return new ConnectionOpenOk.fromStream( decoder );
          case 50:
            return new ConnectionClose.fromStream( decoder );
          case 51:
            return new ConnectionCloseOk.fromStream( decoder );
        }
      break;
      case 20:  // Class: Channel
        switch( msgMethodId ){
          case 11:
            return new ChannelOpenOk.fromStream( decoder );
          case 20:
            return new ChannelFlow.fromStream( decoder );
          case 21:
            return new ChannelFlowOk.fromStream( decoder );
          case 40:
            return new ChannelClose.fromStream( decoder );
          case 41:
            return new ChannelCloseOk.fromStream( decoder );
        }
      break;
      case 40:  // Class: Exchange
        switch( msgMethodId ){
          case 11:
            return new ExchangeDeclareOk.fromStream( decoder );
          case 21:
            return new ExchangeDeleteOk.fromStream( decoder );
        }
      break;
      case 50:  // Class: Queue
        switch( msgMethodId ){
          case 11:
            return new QueueDeclareOk.fromStream( decoder );
          case 21:
            return new QueueBindOk.fromStream( decoder );
          case 51:
            return new QueueUnbindOk.fromStream( decoder );
          case 31:
            return new QueuePurgeOk.fromStream( decoder );
          case 41:
            return new QueueDeleteOk.fromStream( decoder );
        }
      break;
      case 60:  // Class: Basic
        switch( msgMethodId ){
          case 11:
            return new BasicQosOk.fromStream( decoder );
          case 21:
            return new BasicConsumeOk.fromStream( decoder );
          case 31:
            return new BasicCancelOk.fromStream( decoder );
          case 60:
            return new BasicDeliver.fromStream( decoder );
          case 111:
            return new BasicRecoverOk.fromStream( decoder );
        }
      break;
      case 90:  // Class: Tx
        switch( msgMethodId ){
          case 11:
            return new TxSelectOk.fromStream( decoder );
          case 21:
            return new TxCommitOk.fromStream( decoder );
          case 31:
            return new TxRollbackOk.fromStream( decoder );
        }
      break;
    }

    // Message decoding failed; unknown message
    throw new ArgumentError("Unknown message type (class: ${msgClassId}, method: ${msgMethodId})");
  }
}
